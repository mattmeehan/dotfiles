#!/usr/bin/env zsh

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# zshrc.before.local {
  # Put system-specific stuff that needs to be sourced early in
  # `~/.zshrc.before.local`.
  [ -f "$HOME/.zshrc.before.local" ] && source "$HOME/.zshrc.before.local"
# }

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

OS=$(uname -s)

# Environment variables {
  export DEFAULT_USER="thew"
  # Set the default editor
  export EDITOR="vim"
  export VISUAL="vim"
  # Path to dotfiles repo
  export DOTFILES="$HOME/dotfiles"
  # Locale
  export LANG="en_US.UTF-8"
  export LC_ALL="$LANG"
# }

# PATH {
  # User-local executables
  export PATH="$HOME/.local/bin:$PATH"
  # Dotfile executables
  export PATH="$HOME/dotfiles/bin:$PATH"
  # Local executables
  export PATH="$HOME/bin:$PATH"
  # Pyenv
	export PATH="$HOME/.pyenv/bin:$PATH"
# }

# Python {
  eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
  # }

if [[ -v TMUX ]]; then
  tmux source-file "$HOME/.tmux.conf"
fi

# oh-my-zsh {
  # Prevent loading https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/compfix.zsh
  # since it slows down the prompt considerably
  ZSH_DISABLE_COMPFIX=true

  # Path to your oh-my-zsh configuration
  ZSH="$HOME/.oh-my-zsh"

  # Path to your oh-my-zsh custom directory (default is .oh-my-zsh/custom/)
  ZSH_CUSTOM=".oh-my-zsh/custom"

  # Set name of the theme to load.
  # Look in ~/.oh-my-zsh/themes/
  # Optionally, if you set this to "random", it'll load a random theme each
  # time that oh-my-zsh is loaded.
  ZSH_THEME="powerlevel10k/powerlevel10k"

  # Example aliases
  # alias zshconfig="mate ~/.zshrc"
  # alias ohmyzsh="mate ~/.oh-my-zsh"

  # Set to this to use case-sensitive completion
  # CASE_SENSITIVE="true"

  # Comment this out to disable bi-weekly auto-update checks
  # DISABLE_AUTO_UPDATE="true"

  # Uncomment to change how many often would you like to wait before
  # auto-updates occur? (in days)
  export UPDATE_ZSH_DAYS=7

  # Uncomment following line if you want to disable colors in ls
  # DISABLE_LS_COLORS="true"

  # Uncomment following line if you want to disable autosetting terminal
  # title.
  # DISABLE_AUTO_TITLE="true"

  # Uncomment following line if you want red dots to be displayed while
  # waiting for completion
  COMPLETION_WAITING_DOTS="true"

  # Which plugins would you like to load? (plugins can be found in
  # ~/.oh-my-zsh/plugins/*)
  # Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
  # Example format: plugins=(rails git textmate ruby lighthouse)
  plugins=(
    grunt brew command-not-found git github git-flow git-extras git-hubflow
    history-substring-search fasd macos python lol
  )

  source "$ZSH/oh-my-zsh.sh"
# }

# Keybindings {
  # Use vi to edit command line
  bindkey -v

  # Remove delay in entering command mode, as described by
  # http://zsh.sourceforge.net/Guide/zshguide04.html:
  #
  # You can remove all bindings starting with a given prefix by adding the `-p
  # option. The example given in the manual,
  #     bindkey -rpM viins '\e'
  # (except it uses the equivalent form `^[') is amongst the most useful, as it
  # will remove the annoying delay after you type `\e' to enter vi command mode.
  # The delay is there because the cursor keys usually also start with \e and
  # the shell is waiting to see if you actually typed one of those.
  # bindkey -rpM viins "\e"

  # Use control+j and control+k for scrolling through history, since removing
  # all bindings that begin with escape also removes the arrow-key bindings
  bindkey "^K" history-substring-search-up
  bindkey "^J" history-substring-search-down

  # Press Ctrl+Q to push the current command on to the stack. It will disappear,
  # allowing you to enter another command, after which it will reappear in the
  # prompt.
  bindkey "^Q" push-input
# }

# Tool configuration {

  # zsh {
    # Use extended globbing
    setopt extendedglob
  # }

  # Homebrew {
    export HOMEBREW_NO_ANALYTICS=1
  # }

  # dircolors {
    autoload colors;
    # Find the option for using colors in ls, depending on the version
    ls --color -d . &>/dev/null 2>&1 && alias ls='ls --color=auto -F' || alias ls='ls -GF'
    # Use dircolors if available
    dircolors &>/dev/null 2>&1 && eval `dircolors $DOTFILES/zsh/dircolors.ansi-dark` || export LSCOLORS="Gxfxcxdxbxegedabagacad"
    # Use GNU ls if available (for macOS: `brew install coreutils`)
    gdircolors &>/dev/null 2>&1 && eval `gdircolors $DOTFILES/zsh/dircolors.ansi-dark` && alias ls='gls --color=auto -hF'
    export GREP_COLOR='1;31'
  # }

  # git {
    # Fix slow tab completion
    __git_files () {
        _wanted files expl 'local files' _files
    }
  # }

  # SHELLSHOCK {
    # To anyone worried about using servers that may not have attentive admins -
    # put the following line(s) in your ~/.bashrc to help protect yourself:

    env x='() { :;}; echo "WARNING: SHELLSHOCK DETECTED"' \
      bash --norc -c ':' 2>/dev/null;

    # It will print to stdout if and only if your shell is vulnerable, and nothing
    # will be printed if your shell has been patched. It will take a little longer
    # to launch a new shell slightly, but for some, this may be worth it.
  # }

  # iterm {
    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
  # }

# }

# Aliases {

  # General {
    # List only directories
    alias lsd="ls -d */"
    # Allow colors with less
    alias less="less -R"
    # Get the absolute path of a file
    alias fullpath="readlink -f"
    # Use colordiff instead of native diff
    alias diff="colordiff"
    # Always sudo htop (doesn't work properly on macOS otherwise)
    if [ "$OS" = "Darwin" ]; then
      alias htop="sudo htop"
    fi
    # list dir contents (with human-readable sizes)
    alias l="ls -AhG1F"
    alias ll="ls -lAhGF"
    alias lsa="ls -AhGF"
    # Safe rm
    alias t="trash"
    # Clear screen
    alias c="clear"
    # Clear screen and list contents
    alias cl="clear && l"
    # Clear screen and print directory tree
    alias ck="clear && tree"
    # Move up one directory
    alias ..="cd .."
    # Human-readable disk usage information
    alias df="df -h"
    # Forward port
    alias forward="ssh -NL"
  # }

  # vim {
    # Editing shortcuts
    alias v="vim"
    # Edit configuration (from within dotfiles, for interacting with repo)
    alias vrc='$EDITOR $(realpath $HOME/.vimrc)'
  # }

  # git {
    alias gp="git push"
    # git diff
    alias gc="git commit -m"
    # git diff
    alias gd="git d"
    # git diff
    alias gdc="git dc"
    # git log
    alias gl="git l"
    # git log all branches
    alias gla="git la"
    # git branch
    alias gb="git branch"
    # git branch delete
    alias gbd="git branch -d"
    # git flow
    alias gf="git flow"
    # git flow feature
    alias gff="git flow feature"
    # git flow release
    alias gfr="git flow release"
    # git flow hotfix
    alias gfh="git flow hotfix"
    # fast git status
    alias g="git status"
    # edit .gitconfig
    alias vgrc="$EDITOR $HOME/.gitconfig"
  # }

  # tmux {
    alias t="tmux attach || tmux"
  # }

  # aws {
    #alias ecrlogin="aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT.dkr.ecr.us-east-1.amazonaws.com"
    #alias ecrlogin-sudo="aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdid $AWS_ACCOUNT.dkr.ecr.us-east-1.amazonaws.com"
  # }

  # Python {
    # Python interpreter
    alias p="python"
    # IPython intepreter
    alias ip="ipython"
    # remove dot from py.test executable
    alias pytest="python -m pytest"
  # }

  # zsh {
    # Edit zsh config
    alias vsh='$EDITOR $(realpath $HOME/.zshrc)'
    # Source zsh config
    alias szsh='source $(realpath $HOME/.zshrc)'
  # }

# }

# Functions {
    # History search
    histsearch() { fc -lim "*$@*" 1 }

    pip() {
      # Don't install anything into base environment
      if [[ -v CONDA_DEFAULT_ENV ]] then
        string=$(which python)
        word='envs'
        if test "${string#*$word}" != "$string"; then
          python -m pip $@
        # Invoke pip directly through python
        # See https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/
        else
          echo 'Python is not installed in this environment; not running'
        fi
      else
        echo 'No active environment; not running'
      fi
    }

# }

# zshrc.local {
  # Put system-specific stuff in `~/.zshrc.local`.
  [ -f "$HOME/.zshrc.local" ] && source "$HOME/.zshrc.local"
# }

# To customize prompt, run `p10k configure` or edit ~/dotfiles/zsh/p10k.zsh.symlink.
[[ ! -f ~/dotfiles/zsh/p10k.zsh.symlink ]] || source ~/dotfiles/zsh/p10k.zsh.symlink
